{"version":3,"sources":["assets/logo/tulflix_logo-full.png","context/navBarProvider.js","context/selectedVideoProvider.js","components/navbar.link.js","hooks/useAxios.js","hooks/useYoutubeAPI.js","helpers/ytAPI.js","hooks/useDataFromYtAPI.js","context/playlistsProvider.js","components/ui/spinner.js","components/navbar.js","utils/abbreviateNum.js","context/channelProvider.js","components/ui/header.js","components/video.player.js","context/channelActivitiesProvider.js","components/ui/featured.js","components/playlist.items.js","components/playlist.js","components/ui/playlists.js","components/pages/home.page.js","assets/logo/tulflix_logo-icon.png","components/ui/backdrop.js","components/video.modal.js","App.js","reportWebVitals.js","context/appProvider.js","index.js"],"names":["navBarContext","createContext","navBar","toggleNavBar","activePlaylist","setActivePlaylist","NavBarProvider","props","useState","setNavBar","console","log","Provider","value","state","children","selectVideoContext","selectedVideoId","setSelectedVideoId","SelectedVideoProvider","NavBarLink","playlistId","href","text","isActive","useContext","navbarLinkStyle","className","onClick","e","preventDefault","document","getElementById","scrollIntoView","scrollToView","useAxios","method","url","loading","setLoading","response","setResponse","error","setError","config","useEffect","axios","then","catch","finally","type","responseSchema","results","useYoutubeAPI","key","id","maxResults","urls","channel","playlists","playlist_item","videoInfo","channelActivity","channelVideos","setResult","data","items","apiKEY","process","chId","ytAPI","GetChannelInfo","channelId","GetChannelActivity","GetChannelVideos","GetPlaylists","GetPlaylistItems","GetVideoInfo","videoId","useDataFromYtAPI","setState","length","playlistsContext","setPlaylists","manualPlaylists","PlaylistsProvider","getPlaylists","recentUploads","title","allVideos","Spinner","icon","faCircleNotch","NavBar","navBarStyle","navBarArrow","manualList","list","map","item","snippet","faCaretDown","faCaretUp","abbreviateNumber","newValue","suffixNum","toFixed","channelContext","setChannel","ChannelProvider","getChannel","Header","statistics","subscriberCount","src","LogoFull","alt","target","rel","faUserFriends","VideoPlayer","videoID","frameLoaded","setFrameLoaded","onLoad","allowFullScreen","channelActivitiesContext","channelActivities","setChannelActivities","ChannelActivitiesProvider","getChannelActivities","Featured","showVideo","Fragment","contentDetails","upload","thumbnails","high","customUrl","PlaylistItem","imgUrl","setComponentLoaded","loadPlaylistItems","ytApi","Playlist","playListItemsRef","useRef","scrolled","setScrolled","playlistItems","setPlaylistItems","componentLoaded","navButtons","setNavButtons","numOfNavButtons","setNumOfNavButtons","activeNav","setActiveNav","getPlaylistItems","window","addEventListener","onWindowResize","updateNavButtons","Math","round","current","scrollWidth","innerWidth","index","arrayLength","newArray","showScrollNext","scrollTo","behavior","left","scrollLeft","prevPage","faChevronLeft","nextPage","faChevronRight","navId","goToPage","faAngleRight","ref","onScroll","onScrollPage","currentItem","medium","resourceId","Playlists","localized","Homepage","Backdrop","ReactDOM","createPortal","VideoModal","datePublished","Date","likeCount","viewCount","description","setData","video","result","maxres","publishedAt","abbreviateNum","faTimes","toDateString","faThumbsUp","faEye","TulflixIcon","App","basename","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","appContext","AppProvider","render","StrictMode"],"mappings":"keAAe,MAA0B,8C,sBCE5BA,EAAgBC,wBAAc,CACzCC,QAAQ,EACRC,aAAc,aACdC,eAAgB,KAChBC,kBAAmB,eAwBNC,EArBQ,SAACC,GACtB,MAA4BC,oBAAS,GAArC,mBAAON,EAAP,KAAeO,EAAf,KACA,EAA4CD,mBAAS,MAArD,mBAAOJ,EAAP,KAAuBC,EAAvB,KAKA,OADAK,QAAQC,IAAI,oBAEV,cAACX,EAAcY,SAAf,CACEC,MAAO,CACLX,OAAQA,EACRC,aAPe,kBAAMM,GAAU,SAACK,GAAD,OAAYA,MAQ3CV,eAAgBA,EAChBC,kBAAmBA,GALvB,SAQGE,EAAMQ,YCvBAC,EAAqBf,wBAAc,CAC9CgB,gBAAiB,KACjBC,mBAAoB,eAkBPC,EAfe,SAACZ,GAC7B,MAA8CC,mBAAS,MAAvD,mBAAOS,EAAP,KAAwBC,EAAxB,KAEA,OACE,cAACF,EAAmBJ,SAApB,CACEC,MAAO,CACLI,gBAAiBA,EACjBC,mBAAoBA,GAHxB,SAMGX,EAAMQ,YCgBEK,EA3BI,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,WAAYC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACpCrB,EAAiBsB,qBAAWzB,GAA5BG,aACAe,EAAuBO,qBAAWT,GAAlCE,mBAEFQ,EAAkBF,EACpB,iCACA,cAKJ,OACE,oBAAIG,UAAWD,EAAf,SACE,mBACEJ,KAAMA,EACNM,QAAS,SAACC,IARK,SAACA,GACpBA,EAAEC,iBACFC,SAASC,eAAT,WAA4BX,IAAcY,iBAOpCC,CAAaL,GACbX,EAAmB,MACnBf,KALJ,SAQGoB,O,iBCGMY,EA3BE,SAACC,EAAQC,GACxB,MAA8B7B,oBAAS,GAAvC,mBAAO8B,EAAP,KAAgBC,EAAhB,KACA,EAAgC/B,mBAAS,MAAzC,mBAAOgC,EAAP,KAAiBC,EAAjB,KACA,EAA0BjC,mBAAS,MAAnC,mBAAOkC,EAAP,KAAcC,EAAd,KAEMC,EAAS,CAAER,OAAQA,EAAQC,IAAKA,GAmBtC,OANAQ,qBAAU,WAVRC,IAAMF,GACHG,MAAK,SAACP,GAAD,OAAcC,EAAYD,MAC/BQ,OAAM,SAACN,GACNC,EAASD,MAEVO,SAAQ,WACPV,GAAW,QAQd,IAEI,CAAED,UAASE,WAAUE,UCxBjBQ,EACF,UADEA,EAEA,YAFAA,EAGI,gBAHJA,EAIA,YAJAA,EAKM,kBALNA,EAMI,gBAGJC,EAAiB,CAC5Bb,SAAS,EACTc,QAAS,GACTV,MAAO,MAmCMW,EAhCO,SACpBH,EACAI,GAII,IAHJC,EAGG,uDAHE,IACLC,EAEG,uDAFU,GAGPC,EAAO,CACXC,QAAQ,4HAAD,OAA8HH,EAA9H,uBAA+IC,EAA/I,gBAAiKF,GACxKK,UAAU,8EAAD,OAAgFJ,EAAhF,uBAAiGC,EAAjG,gBAAmHF,GAC5HM,cAAc,4HAAD,OAA8HL,EAA9H,uBAA+IC,EAA/I,gBAAiKF,GAC9KO,UAAU,uDAAD,OAAyDN,EAAzD,oDAAuGC,EAAvG,gBAAyHF,GAClIQ,gBAAgB,mGAAD,OAAqGP,EAArG,uBAAsHC,EAAtH,gBAAwIF,GACvJS,cAAc,2EAAD,OAA6ER,EAA7E,uBAA8FC,EAA9F,sCAAsIF,IAGrJ,EAA6B9C,mBAAS,IAAtC,mBAAO4C,EAAP,KAAgBY,EAAhB,KACA,EAAqC7B,EAAS,MAAOsB,EAAKP,IAAlDZ,EAAR,EAAQA,QAASI,EAAjB,EAAiBA,MAAOF,EAAxB,EAAwBA,SAYxB,OAVAK,qBAAU,YACJL,GAAYE,IAEZsB,EADEtB,GAGQF,EAASyB,KAAKC,SAG3B,CAAC1B,EAAUE,IAEP,CAAEJ,UAASI,QAAOU,YC7CrBe,EAASC,0CACTC,EAAO,2BAqBEC,EAnBD,CACZC,eAAgB,eAACC,EAAD,uDAAaH,EAAb,OACdhB,EAAcH,EAAciB,EAAQK,IAEtCC,mBAAoB,eAACD,EAAD,uDAAaH,EAAb,OAClBhB,EAAcH,EAAsBiB,EAAQK,IAE9CE,iBAAkB,eAACF,EAAD,uDAAaH,EAAb,OAChBhB,EAAcH,EAAoBiB,EAAQK,IAE5CG,aAAc,eAACH,EAAD,uDAAaH,EAAb,OACZhB,EAAcH,EAAgBiB,EAAQK,IAExCI,iBAAkB,SAACvD,GAAD,OAChBgC,EAAcH,EAAoBiB,EAAQ9C,IAE5CwD,aAAc,SAACC,GAAD,OAAazB,EAAcH,EAAgBiB,EAAQW,K,QCJpDC,EAbU,SAACd,EAAMnD,EAAOkE,GACrCnC,qBAAU,WAER,GADwC,IAAzB/B,EAAMsC,QAAQ6B,QAAgBnE,EAAMwB,WAE3C2B,EAAK3B,SAAW2B,EAAKb,QAAQ6B,OAAS,GAAMhB,EAAKvB,OAAO,CAC5D,IAAIF,EACJA,EAAQ,eAAQyB,GAChBe,EAASxC,MAGZ,CAACyB,EAAMnD,EAAOkE,KCRNE,EAAmBjF,wBAAc,CAC5C0D,UAAWR,EACXgC,aAAc,aACdC,gBAAiB,KAiCJC,EA9BW,SAAC9E,GACzB,MAAkCC,mBAAS2C,GAA3C,mBAAOQ,EAAP,KAAkBwB,EAAlB,KACAzE,QAAQC,IAAI,uBAEZ,IAAM2E,EAAehB,EAAMK,eAI3B,OAFAI,EAAiBO,EAAc3B,GADP,SAAC7C,GAAD,OAAWqE,EAAarE,MAI9C,cAACoE,EAAiBtE,SAAlB,CACEC,MAAO,CACL8C,UAAWA,EACXwB,aAAcA,EACdC,gBAAiB,CACfG,cAAe,CACbhC,GAAI,kBACJiC,MAAO,kBAETC,UAAW,CACTlC,GAAI,cACJiC,MAAO,gBAXf,SAgBGjF,EAAMQ,YCxBE2E,G,YARC,SAAC,GAAmB,IAAjB/D,EAAgB,EAAhBA,UACjB,OACE,qBAAKA,UAAS,kBAAaA,GAA3B,SACE,cAAC,IAAD,CAAiBgE,KAAMC,UC2EdC,EAtEA,WACb,MAAiDpE,qBAAWzB,GAApDE,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,aAAcC,EAA9B,EAA8BA,eAC9B,EAAuCqB,qBAAWyD,GAA1CvB,EAAR,EAAQA,UAAWyB,EAAnB,EAAmBA,gBACXlE,EAAuBO,qBAAWT,GAAlCE,mBAEF4E,EAAc5F,EAAS,qBAAuB,SAC9C6F,EAAc7F,EAChB,oCACA,2BAIE8F,EAAa,CACjB,cAAC,EAAD,CAEE3E,WAAY+D,EAAgBG,cAAchC,GAC1CjC,KAAK,MACLC,KAAM6D,EAAgBG,cAAcC,MACpChE,SAAU4D,EAAgBG,cAAchC,KAAOnD,GAJ1CgF,EAAgBG,cAAchC,GAAK,WAUtC0C,EAAQtC,EAAUrB,QAatB,cAAC,EAAD,CAASX,UAAU,eAZnBgC,EAAUP,QAAQ8C,KAAI,SAACC,GACrB,OACE,cAAC,EAAD,CAEE9E,WAAY8E,EAAK5C,GACjBjC,KAAK,MACLC,KAAM4E,EAAKC,QAAQZ,MACnBhE,SAAU2E,EAAK5C,KAAOnD,GAJjB+F,EAAK5C,OAYlB,OACE,sBAAK5B,UAAU,oBAAf,UACE,yBACEC,QAAS,SAACC,GACRA,EAAEC,iBACF3B,IACAe,EAAmB,OAJvB,mBAQE,qBAAKS,UAAWoE,EAAhB,SACE,cAAC,IAAD,CAAiBJ,KAAMU,WAI3B,sBAAK1E,UAAWmE,EAAhB,UACE,6BACE,cAAC,IAAD,CAAiBH,KAAMW,QAEzB,8BACE,+BACGN,EACAC,cC3EE,SAASM,EAAiB1F,GACvC,IAAI2F,EAAW3F,EACf,IAGE,IAFA,IACI4F,EAAY,EACTD,GAAY,KACjBA,GAAY,IACZC,IAQF,OALIA,EAAY,IACdD,EAAWA,EAASE,QAAQ,IAG9BF,GAXiB,CAAC,GAAI,IAAK,IAAK,IAAK,KAWhBC,GAErB,SAEA,OADA/F,QAAQC,IAAI,QAAS6F,GACd3F,GCZJ,IAAM8F,EAAiB1G,wBAAc,CAC1CyD,QAASP,EACTyD,WAAY,eAuBCC,EApBS,SAACtG,GACvB,MAA8BC,mBAAS2C,GAAvC,mBAAOO,EAAP,KAAgBkD,EAAhB,KACAlG,QAAQC,IAAI,qBAEZ,IAAMmG,EAAaxC,EAAMC,iBAIzB,OAFAQ,EAAiB+B,EAAYpD,GADP,SAAC5C,GAAD,OAAW8F,EAAW9F,MAI1C,cAAC6F,EAAe/F,SAAhB,CACEC,MAAO,CACL6C,QAASA,EACTkD,WAAYA,GAHhB,SAMGrG,EAAMQ,YCqBEgG,G,YAhCA,WACb,IAAQrD,EAAYjC,qBAAWkF,GAAvBjD,QAEFsD,EAActD,EAAQpB,QAG1B,cAAC,EAAD,CAASX,UAAU,eAFnB,4BAAI4E,EAAiB7C,EAAQN,QAAQ,GAAG4D,WAAWC,mBAKrD,OACE,mCACE,sBAAKtF,UAAU,oBAAf,UACE,qBAAKA,UAAU,YAAYuF,IAAKC,EAAUC,IAAI,0BAC9C,cAAC,EAAD,OAEF,sBAAKzF,UAAU,qBAAf,UACE,oBACEL,KAAK,2DACL+F,OAAO,SACPC,IAAI,aAHN,UAKE,6BACE,cAAC,IAAD,CAAiB3B,KAAM4B,QAExBP,KAEH,oDCZOQ,G,YAxBK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASjC,EAAY,EAAZA,MAC9B,EAAsChF,oBAAS,GAA/C,mBAAOkH,EAAP,KAAoBC,EAApB,KAMA,OACE,sBAAKhG,UAAU,yBAAf,UACE,wBACEiG,OAAQ,SAAC/F,GANb8F,GAAe,IAUXhG,UAAU,oBACVuF,IAAG,wCAAmCO,GACtCI,iBAAe,EACfrC,MAAOA,IAET,qBAAK7D,UAAU,qBAAf,UAAsC+F,GAAe,cAAC,EAAD,CAAS/F,UAAU,sBClBjEmG,EAA2B7H,wBAAc,CACpD8H,kBAAmB5E,EACnB6E,qBAAsB,eA0BTC,EAvBmB,SAAC1H,GACjC,MAAkDC,mBAAS2C,GAA3D,mBAAO4E,EAAP,KAA0BC,EAA1B,KACAtH,QAAQC,IAAI,yBAEZ,IAAMuH,EAAuB5D,EAAMG,qBAOnC,OALAM,EACEmD,EACAH,GAH8B,SAACjH,GAAD,OAAWkH,EAAqBlH,MAO9D,cAACgH,EAAyBlH,SAA1B,CACEC,MAAO,CACLkH,kBAAmBA,EACnBC,qBAAsBA,GAH1B,SAMGzH,EAAMQ,YCoBEoH,EAtCE,WACf,IAAQzE,EAAYjC,qBAAWkF,GAAvBjD,QACAqE,EAAsBtG,qBAAWqG,GAAjCC,kBAEFK,GACHL,EAAkBzF,SAAWyF,EAAkB3E,QAAQ6B,OAAS,EAEnE,OACE,qBAAKtD,UAAU,sBAAf,SACE,cAAC,IAAM0G,SAAP,UACI3E,EAAQpB,QAmBR,qBAAKX,UAAU,+BAAf,SACE,cAAC,EAAD,CAASA,UAAU,iBAnBrByG,EACE,qBAAKzG,UAAU,6BAAf,SACE,cAAC,EAAD,CACE8F,QACEM,EAAkB3E,QAAQ,GAAGkF,eAAeC,OAAOzD,QAErDU,MAAOuC,EAAkB3E,QAAQ,GAAGgD,QAAQZ,UAIhD,qBAAK7D,UAAU,6BAAf,SACE,qBACEuF,IAAKxD,EAAQN,QAAQ,GAAGgD,QAAQoC,WAAWC,KAAKpG,IAChD+E,IAAK1D,EAAQN,QAAQ,GAAGgD,QAAQsC,mBCCjCC,G,MA9BM,SAAC,GAAyB,IAAvBlB,EAAsB,EAAtBA,QAASmB,EAAa,EAAbA,OAC/B,EAA8CpI,oBAAS,GAAvD,mBAAwBqI,GAAxB,WACQ3H,EAAuBO,qBAAWT,GAAlCE,mBAER,IAAKuG,IAAYmB,EACf,OAAO,KAQT,OACE,qBAAKjH,UAAU,0BAAf,SACE,qBACEuF,IAAK0B,EACLxB,IAAKK,EACL7F,QAAS,SAACC,GACRA,EAAEC,iBACFZ,EAAmBuG,IAErBG,OAAQ,SAAC/F,GAbbgH,GAAmB,UCoMjBC,G,MAAoB,SAACzH,EAAY6C,GACrC,OAAIA,EAAMe,OAAS,EACV,CAAE3C,SAAS,EAAOc,QAASc,EAAOxB,MAAO,MAEzCqG,EAAMnE,iBAAiBvD,KAInB2H,EA5ME,SAAC,GAAuC,IAArCxD,EAAoC,EAApCA,MAAOnE,EAA6B,EAA7BA,WAA6B,IAAjB6C,aAAiB,MAAT,GAAS,EAChD+E,EAAmBC,iBAAO,MAChC,EAAgC1I,oBAAS,GAAzC,mBAAO2I,EAAP,KAAiBC,EAAjB,KACA,EAA0C5I,mBAAS0D,GAAnD,mBAAOmF,EAAP,KAAsBC,EAAtB,KACA,EAA8C9I,oBAAS,GAAvD,mBAAO+I,EAAP,KAAwBV,EAAxB,KACA,EAAoCrI,mBAAS,IAA7C,mBAAOgJ,EAAP,KAAmBC,EAAnB,KACA,EAA8CjJ,mBAAS,GAAvD,mBAAOkJ,EAAP,KAAwBC,EAAxB,KACA,EAAkCnJ,oBAAU,GAA5C,mBAAOoJ,EAAP,KAAkBC,EAAlB,KACMC,EAAmBhB,EAAkBzH,EAAY6C,GAEvDrB,qBAAU,WACRkH,OAAOC,iBAAiB,SAAUC,KAGjC,CAAChB,IAEJpG,qBAAU,WACJ0G,GACFU,MAGD,CAACV,IAEJ1G,qBAAU,WACRqH,EAAiBR,GACjBG,EAAa,KAEZ,CAACH,IAEJ7G,qBAAU,WACHiH,EAAiBxH,SAAoC,IAAzB+G,EAAcpE,QAC7CqE,EAAiBQ,EAAiB1G,WAGnC,CAACiG,EAAenF,EAAO4F,IAE1B,IA6BMG,EAAiB,WACjBV,GACFI,EACEQ,KAAKC,MAAMnB,EAAiBoB,QAAQC,YAAcP,OAAOQ,cAKzDL,EAAmB,WAAsB,IAKzCM,EALoBC,EAAoB,uDAAN,EAClB,IAAhBA,IACFA,EAAc,GAIhB,IAAIC,EAAW,CAACD,GAChB,GAAIA,EAAc,EAAG,CACnB,IAAKD,EAAQ,EAAGA,GAASC,EAAaD,IAAS,CAC7C,IAAMjH,EAAKiH,EACXE,EAASF,GAASjH,EAEpBkG,EAAciB,KAIdC,GAAiB,EAErB,IACEA,EAAiB1B,EAAiBoB,QAAQC,YAAcP,OAAOQ,WAC/D,SACAI,GAAiB,EAGnB,OACE,sBAAKhJ,UAAU,qBAAf,UACGwH,GACC,wBACEvH,QAAS,SAACC,GAAD,OAzDA,SAACA,GAChBA,EAAEC,iBACFmH,EAAiBoB,QAAQO,SAAS,CAChCC,SAAU,SACVC,KAAM7B,EAAiBoB,QAAQU,WAAahB,OAAOQ,aAqD/BS,CAASnJ,IACzBF,UAAU,4CAFZ,SAIE,cAAC,IAAD,CAAiBgE,KAAMsF,QAI1BN,GACC,wBACE/I,QAAS,SAACC,GAAD,OA1EA,SAACA,GAChBA,EAAEC,iBACFmH,EAAiBoB,QAAQO,SAAS,CAChCC,SAAU,SACVC,KAAMf,OAAOQ,WAAatB,EAAiBoB,QAAQU,aAsE/BG,CAASrJ,IACzBF,UAAU,6CAFZ,SAIE,cAAC,IAAD,CAAiBgE,KAAMwF,QAKzB,qBAAKxJ,UAAU,kCAAf,SACG6H,EAAWvE,OAAS,GACnBuE,EAAWtD,KAAI,SAACkF,GACd,OACE,wBAEExJ,QAAS,SAACC,GACRA,EAAEC,iBAzEH,SAACD,EAAG2I,GACnB3I,EAAEC,iBACF+H,EAAaW,GACbvB,EAAiBoB,QAAQO,SAAS,CAChCC,SAAU,SACVC,KAAMf,OAAOQ,WAAaC,IAqEZa,CAASxJ,EAAGuJ,IAEdzJ,UACEiI,IAAcwB,EACV,yCACA,IARDA,QAgBjB,sBAAKzJ,UAAU,2BAAf,UACE,6BAAK6D,IACL,qBAAK7D,UAAU,qCAAf,yBACA,qBAAKA,UAAU,qCAAf,SACE,cAAC,IAAD,CAAiBgE,KAAM2F,WAG3B,sBACE3J,UACE,8BACE4H,GAAmB,qBAEvBhG,GAAE,WAAMlC,GACRkK,IAAKtC,EACLuC,SAAU,SAAC3J,IA5FI,SAACA,GAAMuH,EAAYvH,EAAEwF,OAAO0D,WAAa,GA6FtDU,CAAa5J,IAEf+F,OAAQ,WA7FOiB,GAAmB,IAmFpC,UAcE,cAAC,IAAMR,SAAP,UACGgB,EAAcnD,KAAI,SAACC,EAAMqE,GACxB,IAAIkB,EAGJ,IACEA,EACExH,EAAMe,OAAS,EACb,cAAC,EAAD,CAEEwC,QAAStB,EAAKmC,eAAeC,OAAOzD,QACpC8D,OAAQzC,EAAKC,QAAQoC,WAAWmD,OAAOtJ,IACvCmD,MAAOW,EAAKC,QAAQZ,OAHfW,EAAKmC,eAAeC,OAAOzD,QAAU0F,GAM5C,cAAC,EAAD,CAEE/C,QAAStB,EAAKC,QAAQwF,WAAW9G,QACjC8D,OAAQzC,EAAKC,QAAQoC,WAAWmD,OAAOtJ,IACvCmD,MAAOW,EAAKC,QAAQZ,OAHfW,EAAKC,QAAQwF,WAAW9G,QAAU0F,GAM7C,SACAkB,EAAc,KAGhB,OAAOA,OAIX,cAAC,EAAD,WC1JOG,G,MAzCG,WAChB,MAAuCpK,qBAAWyD,GAA1CvB,EAAR,EAAQA,UAAWyB,EAAnB,EAAmBA,gBACX2C,EAAsBtG,qBAAWqG,GAAjCC,kBAER,OACE,sBAAKpG,UAAU,uBAAf,WACIoG,EAAkBzF,SAAWyF,EAAkB3E,QAAQ6B,OAAS,EAChE,cAAC,IAAMoD,SAAP,UACE,cAAC,EAAD,CACE7C,MAAOJ,EAAgBG,cAAcC,MACrCnE,WAAY+D,EAAgBG,cAAchC,GAC1CW,MAAO6D,EAAkB3E,YAI7B,qBAAKzB,UAAU,+BAAf,SACE,cAAC,EAAD,CAASA,UAAU,kBAIrBgC,EAAUrB,SAAWqB,EAAUP,QAAQ6B,OAAS,EAChD,cAAC,IAAMoD,SAAP,UACG1E,EAAUP,QAAQ8C,KAAI,SAACC,GACtB,OACE,cAAC,EAAD,CAEEX,MAAOW,EAAKC,QAAQ0F,UAAUtG,MAC9BnE,WAAY8E,EAAK5C,IAFZ4C,EAAK5C,SAQlB,qBAAK5B,UAAU,+BAAf,SACE,cAAC,EAAD,CAASA,UAAU,sBC/BdoK,EATE,WACf,OACE,eAAC,IAAM1D,SAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,QCRS,MAA0B,8CCW1B2D,G,MAPE,SAACzL,GAChB,OAAO0L,IAASC,aACd,qBAAKvK,UAAU,sBAAf,SAAsCpB,EAAMQ,WAC5CgB,SAASC,eAAe,sBCsGbmK,I,MA5FI,SAAC,GAAiB,IAAfrH,EAAc,EAAdA,QACpB,EAAwBtE,mBAAS,CAC/B+C,GAAI,GACJiC,MAAO,GACPoD,OAAQ,GACRwD,cAAe,IAAIC,KACnBC,UAAW,GACXC,UAAW,GACXC,YAAa,KAPf,mBAAOvI,EAAP,KAAawI,EAAb,KAUQvL,EAAuBO,qBAAWT,GAAlCE,mBAEFwL,EAAQpI,EAAMO,aAAaC,GAqBjC,OAnBAjC,qBAAU,WAEL6J,EAAMpK,SACU,OAAjBoK,EAAMC,QACU,OAAhBD,EAAMhK,OACM,KAAZuB,EAAKV,IAELkJ,EAAQ,CACNlJ,GAAImJ,EAAMtJ,QAAQ,GAAGG,GACrBiC,MAAOkH,EAAMtJ,QAAQ,GAAGgD,QAAQZ,MAChCoD,OAAQ8D,EAAMtJ,QAAQ,GAAGgD,QAAQoC,WAAWoE,OAAOvK,IACnD+J,cAAe,IAAIC,KAAKK,EAAMtJ,QAAQ,GAAGgD,QAAQyG,aACjDP,UAAWQ,EAAcJ,EAAMtJ,QAAQ,GAAG4D,WAAWsF,WACrDC,UAAWO,EAAcJ,EAAMtJ,QAAQ,GAAG4D,WAAWuF,WACrDC,YAAaE,EAAMtJ,QAAQ,GAAGgD,QAAQoG,gBAGzC,CAACE,EAAOzI,IAGT,cAAC,EAAD,UACE,sBAAKtC,UAAU,yBAAf,UACE,qBAAKA,UAAU,oCAAf,SACE,wBACEC,QAAS,SAACC,GACRA,EAAEC,iBACFZ,EAAmB,OAHvB,SAME,cAAC,IAAD,CAAiByE,KAAMoH,UAG3B,sBAAKpL,UAAU,+BAAf,UACE,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,cAAC,EAAD,CAAa8F,QAASxD,EAAKV,GAAIiC,MAAOvB,EAAKuB,UAE7C,qBAAK0B,IAAKjD,EAAK2E,OAAQxB,IAAKnD,EAAKuB,WAGlCkH,EAAMpK,QACL,cAAC,EAAD,CAASX,UAAW,eAEpB,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,4BAAIsC,EAAKmI,cAAcY,iBAEvB,sBAAKrL,UAAU,wCAAf,UACE,4BACE,cAAC,IAAD,CAAiBgE,KAAMsH,QAEzB,4BAAIhJ,EAAKqI,eAGX,sBAAK3K,UAAU,wCAAf,UACE,4BACE,cAAC,IAAD,CAAiBgE,KAAMuH,QAEzB,4BAAIjJ,EAAKsI,kBAIb,sBAAK5K,UAAU,qBAAf,UACE,qBAAKuF,IAAKiG,EAAa/F,IAAK+F,IAC5B,2CAEF,6BAAKlJ,EAAKuB,QAEV,qBAAK7D,UAAU,YAAf,SAA4BsC,EAAKuI,2BCtDhCY,OAlCf,WACE,IAAQnM,EAAoBQ,qBAAWT,GAA/BC,gBAER4B,qBAAU,WACRnC,QAAQC,IAAI,qBAGdkC,qBAAU,WACRnC,QAAQC,IAAI,uBAAwBM,KACnC,CAACA,IAEJ,IAAM4C,EACgB,OAApB5C,GACAgL,IAASC,aACP,cAAC,GAAD,CAAYpH,QAAS7D,IACrBc,SAASC,eAAe,oBAG5B,OACE,sBAAKL,UAAU,MAAf,UACE,eAAC,IAAD,CAAQ0L,SAAU,IAAlB,UACE,cAAC,EAAD,IAEA,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAZ,SACE,cAAC,EAAD,WAILzJ,MC7BQ0J,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1K,MAAK,YAAkD,IAA/C2K,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCRO,GAAa9N,0BAmBJ+N,GAjBK,SAACzN,GAEnB,OADAG,QAAQC,IAAI,iBAEV,cAACoN,GAAWnN,SAAZ,CAAqBC,MAAON,EAA5B,SACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,UAAoBA,EAAMQ,sBCVxCkL,IAASgC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,UACE,cAAC,GAAD,QAGJnM,SAASC,eAAe,SAM1BuL,O","file":"static/js/main.854beaea.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tulflix_logo-full.49b0b67c.png\";","import { createContext, useState } from \"react\";\r\n\r\nexport const navBarContext = createContext({\r\n  navBar: false,\r\n  toggleNavBar: () => {},\r\n  activePlaylist: null,\r\n  setActivePlaylist: () => {},\r\n});\r\n\r\nconst NavBarProvider = (props) => {\r\n  const [navBar, setNavBar] = useState(false);\r\n  const [activePlaylist, setActivePlaylist] = useState(null);\r\n\r\n  const toggleNavBar = () => setNavBar((state) => !state);\r\n\r\n  console.log(\"@Provider NavBar\");\r\n  return (\r\n    <navBarContext.Provider\r\n      value={{\r\n        navBar: navBar,\r\n        toggleNavBar: toggleNavBar,\r\n        activePlaylist: activePlaylist,\r\n        setActivePlaylist: setActivePlaylist,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </navBarContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NavBarProvider;\r\n","import { createContext, useState } from \"react\";\r\n\r\nexport const selectVideoContext = createContext({\r\n  selectedVideoId: null,\r\n  setSelectedVideoId: () => {},\r\n});\r\n\r\nconst SelectedVideoProvider = (props) => {\r\n  const [selectedVideoId, setSelectedVideoId] = useState(null);\r\n\r\n  return (\r\n    <selectVideoContext.Provider\r\n      value={{\r\n        selectedVideoId: selectedVideoId,\r\n        setSelectedVideoId: setSelectedVideoId,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </selectVideoContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SelectedVideoProvider;\r\n","import { useContext } from \"react\";\r\nimport \"../styles/navbar.link.css\";\r\n\r\nimport { navBarContext } from \"../context/navBarProvider\";\r\nimport { selectVideoContext } from \"../context/selectedVideoProvider\";\r\n\r\nconst NavBarLink = ({ playlistId, href, text, isActive }) => {\r\n  const { toggleNavBar } = useContext(navBarContext);\r\n  const { setSelectedVideoId } = useContext(selectVideoContext);\r\n\r\n  const navbarLinkStyle = isActive\r\n    ? \"navbar-link navbar-link-active\"\r\n    : \"navbar-link\";\r\n  const scrollToView = (e) => {\r\n    e.preventDefault();\r\n    document.getElementById(`#${playlistId}`).scrollIntoView();\r\n  };\r\n  return (\r\n    <li className={navbarLinkStyle}>\r\n      <a\r\n        href={href}\r\n        onClick={(e) => {\r\n          scrollToView(e);\r\n          setSelectedVideoId(null);\r\n          toggleNavBar();\r\n        }}\r\n      >\r\n        {text}\r\n      </a>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default NavBarLink;\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useAxios = (method, url) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [response, setResponse] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const config = { method: method, url: url };\r\n\r\n  const fetchData = () => {\r\n    axios(config)\r\n      .then((response) => setResponse(response))\r\n      .catch((error) => {\r\n        setError(error);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return { loading, response, error };\r\n};\r\n\r\nexport default useAxios;\r\n","import { useEffect, useState } from \"react\";\r\nimport useAxios from \"./useAxios\";\r\n\r\nexport const type = {\r\n  channel: \"channel\",\r\n  playlists: \"playlists\",\r\n  playlist_item: \"playlist_item\",\r\n  videoInfo: \"videoInfo\",\r\n  channelActivity: \"channelActivity\",\r\n  channelVideos: \"channelVideos\",\r\n};\r\n\r\nexport const responseSchema = {\r\n  loading: true,\r\n  results: [],\r\n  error: null,\r\n};\r\n\r\nconst useYoutubeAPI = (\r\n  type,\r\n  key,\r\n  id = \"0\",\r\n  maxResults = 50,\r\n  pageToken = \"\"\r\n) => {\r\n  const urls = {\r\n    channel: `https://youtube.googleapis.com/youtube/v3/channels?part=snippet&part=statistics&part=contentDetails&part=topicDetails&id=${id}&maxResults=${maxResults}&key=${key}`,\r\n    playlists: `https://youtube.googleapis.com/youtube/v3/playlists?part=snippet&channelId=${id}&maxResults=${maxResults}&key=${key}`,\r\n    playlist_item: ` https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet&part=id&part=contentDetails&part=status&playlistId=${id}&maxResults=${maxResults}&key=${key}`,\r\n    videoInfo: `https://youtube.googleapis.com/youtube/v3/videos?id=${id}&part=snippet&part=statistics&maxResults=${maxResults}&key=${key}`,\r\n    channelActivity: `https://youtube.googleapis.com/youtube/v3/activities?part=contentDetails&part=snippet&channelId=${id}&maxResults=${maxResults}&key=${key}`,\r\n    channelVideos: `https://youtube.googleapis.com/youtube/v3/search?part=snippet&channelId=${id}&maxResults=${maxResults}&order=date&type=video&key=${key}`,\r\n  };\r\n\r\n  const [results, setResult] = useState([]);\r\n  const { loading, error, response } = useAxios(\"get\", urls[type]);\r\n\r\n  useEffect(() => {\r\n    if (response || error) {\r\n      if (error) {\r\n        setResult(error);\r\n      } else {\r\n        setResult(response.data.items);\r\n      }\r\n    }\r\n  }, [response, error]);\r\n\r\n  return { loading, error, results };\r\n};\r\n\r\nexport default useYoutubeAPI;\r\n","import useYoutubeAPI, { type } from \"../hooks/useYoutubeAPI\";\r\n\r\nconst apiKEY = process.env.REACT_APP_KEY;\r\nconst chId = \"UCxhygwqQ1ZMoBGQM2yEcNug\"; //TULFO CHANNEL ID\r\n\r\nconst ytAPI = {\r\n  GetChannelInfo: (channelId = chId) =>\r\n    useYoutubeAPI(type.channel, apiKEY, channelId),\r\n\r\n  GetChannelActivity: (channelId = chId) =>\r\n    useYoutubeAPI(type.channelActivity, apiKEY, channelId),\r\n\r\n  GetChannelVideos: (channelId = chId) =>\r\n    useYoutubeAPI(type.channelVideos, apiKEY, channelId),\r\n\r\n  GetPlaylists: (channelId = chId) =>\r\n    useYoutubeAPI(type.playlists, apiKEY, channelId),\r\n\r\n  GetPlaylistItems: (playlistId) =>\r\n    useYoutubeAPI(type.playlist_item, apiKEY, playlistId),\r\n\r\n  GetVideoInfo: (videoId) => useYoutubeAPI(type.videoInfo, apiKEY, videoId),\r\n};\r\n\r\nexport default ytAPI;\r\n","import { useEffect } from \"react\";\r\n\r\nimport { responseSchema } from \"./useYoutubeAPI\";\r\n\r\nconst useDataFromYtAPI = (data, state, setState) => {\r\n  useEffect(() => {\r\n    const loaded = state.results.length === 0 && state.loading;\r\n    if (loaded) {\r\n      if ((!data.loading && data.results.length > 0) || data.error) {\r\n        let response = responseSchema;\r\n        response = { ...data };\r\n        setState(response);\r\n      }\r\n    }\r\n  }, [data, state, setState]);\r\n};\r\n\r\nexport default useDataFromYtAPI;\r\n","import { createContext, useState } from \"react\";\r\n\r\nimport ytAPI from \"../helpers/ytAPI\";\r\nimport useDataFromYtAPI from \"../hooks/useDataFromYtAPI\";\r\nimport { responseSchema } from \"../hooks/useYoutubeAPI\";\r\n\r\nexport const playlistsContext = createContext({\r\n  playlists: responseSchema,\r\n  setPlaylists: () => {},\r\n  manualPlaylists: {},\r\n});\r\n\r\nconst PlaylistsProvider = (props) => {\r\n  const [playlists, setPlaylists] = useState(responseSchema);\r\n  console.log(\"@Provider Playlists\");\r\n\r\n  const getPlaylists = ytAPI.GetPlaylists();\r\n  const updatePlaylists = (state) => setPlaylists(state);\r\n  useDataFromYtAPI(getPlaylists, playlists, updatePlaylists);\r\n\r\n  return (\r\n    <playlistsContext.Provider\r\n      value={{\r\n        playlists: playlists,\r\n        setPlaylists: setPlaylists,\r\n        manualPlaylists: {\r\n          recentUploads: {\r\n            id: \"recentUploads01\",\r\n            title: \"RECENT UPLOADS\",\r\n          },\r\n          allVideos: {\r\n            id: \"allVideos02\",\r\n            title: \"ALL VIDEOS\",\r\n          },\r\n        },\r\n      }}\r\n    >\r\n      {props.children}\r\n    </playlistsContext.Provider>\r\n  );\r\n};\r\n\r\nexport default PlaylistsProvider;\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCircleNotch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"../../styles/spinner.css\";\r\n\r\nconst Spinner = ({ className }) => {\r\n  return (\r\n    <div className={`spinner ${className}`}>\r\n      <FontAwesomeIcon icon={faCircleNotch} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useContext } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCaretDown, faCaretUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport NavBarLink from \"../components/navbar.link\";\r\n\r\nimport { navBarContext } from \"../context/navBarProvider\";\r\nimport { playlistsContext } from \"../context/playlistsProvider\";\r\nimport { selectVideoContext } from \"../context/selectedVideoProvider\";\r\n\r\nimport \"../styles/navbar.css\";\r\nimport Spinner from \"./ui/spinner\";\r\n\r\nconst NavBar = () => {\r\n  const { navBar, toggleNavBar, activePlaylist } = useContext(navBarContext);\r\n  const { playlists, manualPlaylists } = useContext(playlistsContext);\r\n  const { setSelectedVideoId } = useContext(selectVideoContext);\r\n\r\n  const navBarStyle = navBar ? \"navbar navbar-open\" : \"navbar\";\r\n  const navBarArrow = navBar\r\n    ? \"container__navbar__arrow arrow-up\"\r\n    : \"container__navbar__arrow\";\r\n\r\n  /* LOAD PLAYLIST */\r\n  /* MANUAL PLAYLIST */\r\n  const manualList = [\r\n    <NavBarLink\r\n      key={manualPlaylists.recentUploads.id + \"navbar\"}\r\n      playlistId={manualPlaylists.recentUploads.id}\r\n      href=\"src\"\r\n      text={manualPlaylists.recentUploads.title}\r\n      isActive={manualPlaylists.recentUploads.id === activePlaylist}\r\n    />,\r\n  ];\r\n\r\n  /* LOAD PLAYLIST */\r\n  /* YOUTUBE PLAYLIST */\r\n  const list = !playlists.loading ? (\r\n    playlists.results.map((item) => {\r\n      return (\r\n        <NavBarLink\r\n          key={item.id}\r\n          playlistId={item.id}\r\n          href=\"src\"\r\n          text={item.snippet.title}\r\n          isActive={item.id === activePlaylist}\r\n        />\r\n      );\r\n    })\r\n  ) : (\r\n    <Spinner className=\"spinner-sm\" />\r\n  );\r\n\r\n  return (\r\n    <div className=\"container__navbar\">\r\n      <button\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          toggleNavBar();\r\n          setSelectedVideoId(null);\r\n        }}\r\n      >\r\n        Browse\r\n        <div className={navBarArrow}>\r\n          <FontAwesomeIcon icon={faCaretDown} />\r\n        </div>\r\n      </button>\r\n\r\n      <div className={navBarStyle}>\r\n        <em>\r\n          <FontAwesomeIcon icon={faCaretUp} />\r\n        </em>\r\n        <nav>\r\n          <ul>\r\n            {manualList}\r\n            {list}\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","export default function abbreviateNumber(value) {\r\n  let newValue = value;\r\n  try {\r\n    const suffixes = [\"\", \"K\", \"M\", \"B\", \"T\"];\r\n    let suffixNum = 0;\r\n    while (newValue >= 1000) {\r\n      newValue /= 1000;\r\n      suffixNum++;\r\n    }\r\n\r\n    if (suffixNum > 0) {\r\n      newValue = newValue.toFixed(1);\r\n    }\r\n\r\n    newValue += suffixes[suffixNum];\r\n    return newValue;\r\n  } catch {\r\n    console.log(\"error\", newValue);\r\n    return value;\r\n  }\r\n}\r\n","import { createContext, useState } from \"react\";\r\n\r\nimport ytAPI from \"../helpers/ytAPI\";\r\nimport useDataFromYtAPI from \"../hooks/useDataFromYtAPI\";\r\nimport { responseSchema } from \"../hooks/useYoutubeAPI\";\r\n\r\nexport const channelContext = createContext({\r\n  channel: responseSchema,\r\n  setChannel: () => {},\r\n});\r\n\r\nconst ChannelProvider = (props) => {\r\n  const [channel, setChannel] = useState(responseSchema);\r\n  console.log(\"@Provider Channel\");\r\n\r\n  const getChannel = ytAPI.GetChannelInfo();\r\n  const updateChannel = (state) => setChannel(state);\r\n  useDataFromYtAPI(getChannel, channel, updateChannel);\r\n\r\n  return (\r\n    <channelContext.Provider\r\n      value={{\r\n        channel: channel,\r\n        setChannel: setChannel,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </channelContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ChannelProvider;\r\n","import React, { useContext } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faUserFriends } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport LogoFull from \"../../assets/logo/tulflix_logo-full.png\";\r\n\r\nimport NavBar from \"../navbar\";\r\nimport Spinner from \"../ui/spinner\";\r\nimport abbreviateNumber from \"../../utils/abbreviateNum\";\r\n\r\nimport { channelContext } from \"../../context/channelProvider\";\r\n\r\nimport \"../../styles/header.css\";\r\nimport \"../../styles/logo.css\";\r\n\r\nconst Header = () => {\r\n  const { channel } = useContext(channelContext);\r\n\r\n  const statistics = !channel.loading ? (\r\n    <p>{abbreviateNumber(channel.results[0].statistics.subscriberCount)}</p>\r\n  ) : (\r\n    <Spinner className=\"spinner-sm\" />\r\n  );\r\n\r\n  return (\r\n    <header>\r\n      <div className=\"header__item_left\">\r\n        <img className=\"logo-full\" src={LogoFull} alt=\"tulflix_logo-full.png\" />\r\n        <NavBar />\r\n      </div>\r\n      <div className=\"header__item_right\">\r\n        <a\r\n          href=\"https://www.youtube.com/channel/UCxhygwqQ1ZMoBGQM2yEcNug\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          <em>\r\n            <FontAwesomeIcon icon={faUserFriends} />\r\n          </em>\r\n          {statistics}\r\n        </a>\r\n        <p>Subscribers</p>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { useState } from 'react';\r\nimport '../styles/video.player.css';\r\n\r\nimport Spinner from './ui/spinner';\r\n\r\nconst VideoPlayer = ({ videoID, title }) => {\r\n  const [frameLoaded, setFrameLoaded] = useState(false);\r\n\r\n  const onFrameLoad = (e) => {\r\n    setFrameLoaded(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container__videoplayer\">\r\n      <iframe\r\n        onLoad={(e) => {\r\n          // console.log(e);\r\n          onFrameLoad(e);\r\n        }}\r\n        className=\"iframe-responsive\"\r\n        src={`https://www.youtube.com/embed/${videoID}`}\r\n        allowFullScreen\r\n        title={title}\r\n      />\r\n      <div className=\"container__loading\">{!frameLoaded && <Spinner className=\"spinner-lg\" />}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoPlayer;\r\n","import { createContext, useState } from \"react\";\r\n\r\nimport ytAPI from \"../helpers/ytAPI\";\r\nimport useDataFromYtAPI from \"../hooks/useDataFromYtAPI\";\r\nimport { responseSchema } from \"../hooks/useYoutubeAPI\";\r\n\r\nexport const channelActivitiesContext = createContext({\r\n  channelActivities: responseSchema,\r\n  setChannelActivities: () => {},\r\n});\r\n\r\nconst ChannelActivitiesProvider = (props) => {\r\n  const [channelActivities, setChannelActivities] = useState(responseSchema);\r\n  console.log(\"@Provider Channel Act\");\r\n\r\n  const getChannelActivities = ytAPI.GetChannelActivity();\r\n  const updateChannelActivities = (state) => setChannelActivities(state);\r\n  useDataFromYtAPI(\r\n    getChannelActivities,\r\n    channelActivities,\r\n    updateChannelActivities\r\n  );\r\n  return (\r\n    <channelActivitiesContext.Provider\r\n      value={{\r\n        channelActivities: channelActivities,\r\n        setChannelActivities: setChannelActivities,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </channelActivitiesContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ChannelActivitiesProvider;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport Spinner from \"../ui/spinner\";\r\n\r\nimport \"../../styles/featured.css\";\r\n\r\nimport VideoPlayer from \"../video.player\";\r\n\r\nimport { channelContext } from \"../../context/channelProvider\";\r\nimport { channelActivitiesContext } from \"../../context/channelActivitiesProvider\";\r\n\r\nconst Featured = () => {\r\n  const { channel } = useContext(channelContext);\r\n  const { channelActivities } = useContext(channelActivitiesContext);\r\n\r\n  const showVideo =\r\n    !channelActivities.loading && channelActivities.results.length > 0;\r\n\r\n  return (\r\n    <div className=\"container__featured\">\r\n      <React.Fragment>\r\n        {!channel.loading ? (\r\n          showVideo ? (\r\n            <div className=\"container__featured__video\">\r\n              <VideoPlayer\r\n                videoID={\r\n                  channelActivities.results[0].contentDetails.upload.videoId\r\n                }\r\n                title={channelActivities.results[0].snippet.title}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div className=\"container__featured__image\">\r\n              <img\r\n                src={channel.results[0].snippet.thumbnails.high.url}\r\n                alt={channel.results[0].snippet.customUrl}\r\n              />\r\n            </div>\r\n          )\r\n        ) : (\r\n          <div className=\"container__featured__loading\">\r\n            <Spinner className=\"spinner-lg\" />\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Featured;\r\n","import { useContext, useState } from \"react\";\r\nimport \"../styles/playlistitem.css\";\r\n\r\nimport { selectVideoContext } from \"../context/selectedVideoProvider\";\r\nimport Spinner from \"./ui/spinner\";\r\n\r\nconst PlaylistItem = ({ videoID, imgUrl }) => {\r\n  const [componentLoaded, setComponentLoaded] = useState(false);\r\n  const { setSelectedVideoId } = useContext(selectVideoContext);\r\n\r\n  if (!videoID || !imgUrl) {\r\n    return null;\r\n  }\r\n\r\n  const onComponentLoad = (e) => {\r\n    setComponentLoaded(true);\r\n  };\r\n\r\n  /* {!componentLoaded && <Spinner className=\"spinner-md\" />} */\r\n  return (\r\n    <div className=\"container__playlistitem\">\r\n      <img\r\n        src={imgUrl}\r\n        alt={videoID}\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          setSelectedVideoId(videoID);\r\n        }}\r\n        onLoad={(e) => {\r\n          onComponentLoad(e);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlaylistItem;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faAngleRight,\r\n  faChevronRight,\r\n  faChevronLeft,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport PlaylistItem from \"./playlist.items\";\r\n\r\nimport ytApi from \"../helpers/ytAPI.js\";\r\n\r\nimport \"../styles/playlist.css\";\r\n\r\nconst Playlist = ({ title, playlistId, items = [] }) => {\r\n  const playListItemsRef = useRef(null);\r\n  const [scrolled, setScrolled] = useState(false);\r\n  const [playlistItems, setPlaylistItems] = useState(items);\r\n  const [componentLoaded, setComponentLoaded] = useState(false);\r\n  const [navButtons, setNavButtons] = useState([]);\r\n  const [numOfNavButtons, setNumOfNavButtons] = useState(0);\r\n  const [activeNav, setActiveNav] = useState(-1);\r\n  const getPlaylistItems = loadPlaylistItems(playlistId, items);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", onWindowResize);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [playListItemsRef]);\r\n\r\n  useEffect(() => {\r\n    if (componentLoaded) {\r\n      onWindowResize();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [componentLoaded]);\r\n\r\n  useEffect(() => {\r\n    updateNavButtons(numOfNavButtons);\r\n    setActiveNav(0);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [numOfNavButtons]);\r\n\r\n  useEffect(() => {\r\n    if (!getPlaylistItems.loading && playlistItems.length === 0) {\r\n      setPlaylistItems(getPlaylistItems.results);\r\n      // contextApp.addToPlaylistItems([...getPlaylistItems.results]);\r\n    }\r\n  }, [playlistItems, items, getPlaylistItems]);\r\n\r\n  const nextPage = (e) => {\r\n    e.preventDefault();\r\n    playListItemsRef.current.scrollTo({\r\n      behavior: \"smooth\",\r\n      left: window.innerWidth + playListItemsRef.current.scrollLeft,\r\n    });\r\n  };\r\n\r\n  const prevPage = (e) => {\r\n    e.preventDefault();\r\n    playListItemsRef.current.scrollTo({\r\n      behavior: \"smooth\",\r\n      left: playListItemsRef.current.scrollLeft - window.innerWidth,\r\n    });\r\n  };\r\n\r\n  const goToPage = (e, index) => {\r\n    e.preventDefault();\r\n    setActiveNav(index);\r\n    playListItemsRef.current.scrollTo({\r\n      behavior: \"smooth\",\r\n      left: window.innerWidth * index,\r\n    });\r\n  };\r\n\r\n  const onScrollPage = (e) => setScrolled(e.target.scrollLeft > 0);\r\n\r\n  const onLoad = () => setComponentLoaded(true);\r\n\r\n  const onWindowResize = () => {\r\n    if (componentLoaded) {\r\n      setNumOfNavButtons(\r\n        Math.round(playListItemsRef.current.scrollWidth / window.innerWidth)\r\n      );\r\n    }\r\n  };\r\n\r\n  const updateNavButtons = (arrayLength = 0) => {\r\n    if (arrayLength === 1) {\r\n      arrayLength = 0;\r\n    }\r\n    // console.log(title, '@UPDATE NAV BUTTONS', arrayLength);\r\n    let index;\r\n    let newArray = [arrayLength];\r\n    if (arrayLength > 0) {\r\n      for (index = 0; index <= arrayLength; index++) {\r\n        const id = index;\r\n        newArray[index] = id;\r\n      }\r\n      setNavButtons(newArray);\r\n    }\r\n  };\r\n\r\n  let showScrollNext = true;\r\n\r\n  try {\r\n    showScrollNext = playListItemsRef.current.scrollWidth > window.innerWidth;\r\n  } catch {\r\n    showScrollNext = true;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container_playlist\">\r\n      {scrolled && (\r\n        <button\r\n          onClick={(e) => prevPage(e)}\r\n          className=\"container__playlist__control control-left\"\r\n        >\r\n          <FontAwesomeIcon icon={faChevronLeft} />\r\n        </button>\r\n      )}\r\n\r\n      {showScrollNext && (\r\n        <button\r\n          onClick={(e) => nextPage(e)}\r\n          className=\"container__playlist__control control-right\"\r\n        >\r\n          <FontAwesomeIcon icon={faChevronRight} />\r\n        </button>\r\n      )}\r\n\r\n      {\r\n        <div className=\"container__playlist-nav-buttons\">\r\n          {navButtons.length > 0 &&\r\n            navButtons.map((navId) => {\r\n              return (\r\n                <button\r\n                  key={navId}\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    goToPage(e, navId);\r\n                  }}\r\n                  className={\r\n                    activeNav === navId\r\n                      ? \"container__playlist-nav-buttons-active\"\r\n                      : \"\"\r\n                  }\r\n                ></button>\r\n              );\r\n            })}\r\n        </div>\r\n      }\r\n\r\n      <div className=\"container_playlist-title\">\r\n        <h2>{title}</h2>\r\n        <div className=\"container_playlist-title__sub-text\">Explore all</div>\r\n        <div className=\"container_playlist-title__sub-icon\">\r\n          <FontAwesomeIcon icon={faAngleRight} />\r\n        </div>\r\n      </div>\r\n      <div\r\n        className={\r\n          \"container_playlist-items \" +\r\n          (!componentLoaded && \" playlist-loading\")\r\n        }\r\n        id={`#${playlistId}`}\r\n        ref={playListItemsRef}\r\n        onScroll={(e) => {\r\n          onScrollPage(e);\r\n        }}\r\n        onLoad={() => {\r\n          onLoad();\r\n        }}\r\n      >\r\n        <React.Fragment>\r\n          {playlistItems.map((item, index) => {\r\n            let currentItem;\r\n\r\n            /* DONT RENDER PRIVATE AND DELETED VIDEO */\r\n            try {\r\n              currentItem =\r\n                items.length > 0 ? (\r\n                  <PlaylistItem\r\n                    key={item.contentDetails.upload.videoId + index}\r\n                    videoID={item.contentDetails.upload.videoId}\r\n                    imgUrl={item.snippet.thumbnails.medium.url}\r\n                    title={item.snippet.title}\r\n                  />\r\n                ) : (\r\n                  <PlaylistItem\r\n                    key={item.snippet.resourceId.videoId + index}\r\n                    videoID={item.snippet.resourceId.videoId}\r\n                    imgUrl={item.snippet.thumbnails.medium.url}\r\n                    title={item.snippet.title}\r\n                  />\r\n                );\r\n            } catch {\r\n              currentItem = null;\r\n            }\r\n\r\n            return currentItem;\r\n          })}\r\n        </React.Fragment>\r\n\r\n        <PlaylistItem />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst loadPlaylistItems = (playlistId, items) => {\r\n  if (items.length > 0) {\r\n    return { loading: false, results: items, error: null };\r\n  } else {\r\n    return ytApi.GetPlaylistItems(playlistId);\r\n  }\r\n};\r\n\r\nexport default Playlist;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport Playlist from \"../playlist\";\r\nimport Spinner from \"../ui/spinner\";\r\n\r\nimport { playlistsContext } from \"../../context/playlistsProvider\";\r\nimport { channelActivitiesContext } from \"../../context/channelActivitiesProvider\";\r\n\r\nimport \"../../styles/playlists.css\";\r\n\r\nconst Playlists = () => {\r\n  const { playlists, manualPlaylists } = useContext(playlistsContext);\r\n  const { channelActivities } = useContext(channelActivitiesContext);\r\n\r\n  return (\r\n    <div className=\"container__playlists\">\r\n      {!channelActivities.loading && channelActivities.results.length > 0 ? (\r\n        <React.Fragment>\r\n          <Playlist\r\n            title={manualPlaylists.recentUploads.title}\r\n            playlistId={manualPlaylists.recentUploads.id}\r\n            items={channelActivities.results}\r\n          />\r\n        </React.Fragment>\r\n      ) : (\r\n        <div className=\"container__playlists_loading\">\r\n          <Spinner className=\"spinner-lg\" />\r\n        </div>\r\n      )}\r\n\r\n      {!playlists.loading && playlists.results.length > 0 ? (\r\n        <React.Fragment>\r\n          {playlists.results.map((item) => {\r\n            return (\r\n              <Playlist\r\n                key={item.id}\r\n                title={item.snippet.localized.title}\r\n                playlistId={item.id}\r\n              />\r\n            );\r\n          })}\r\n        </React.Fragment>\r\n      ) : (\r\n        <div className=\"container__playlists_loading\">\r\n          <Spinner className=\"spinner-lg\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Playlists;\r\n","import React from 'react';\r\nimport Featured from '../ui/featured';\r\nimport Playlists from '../ui/playlists';\r\n\r\nconst Homepage = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Featured />\r\n      <Playlists />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Homepage;\r\n","export default __webpack_public_path__ + \"static/media/tulflix_logo-icon.93cc8c92.png\";","import ReactDOM from 'react-dom';\r\n\r\nimport '../../styles/backdrop.css';\r\n\r\nconst Backdrop = (props) => {\r\n  return ReactDOM.createPortal(\r\n    <div className=\"container__backdrop\">{props.children}</div>,\r\n    document.getElementById('root-video-info')\r\n  );\r\n};\r\n\r\nexport default Backdrop;\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEye, faThumbsUp, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport TulflixIcon from \"../assets/logo/tulflix_logo-icon.png\";\r\n\r\nimport abbreviateNum from \"../utils/abbreviateNum\";\r\n\r\nimport Backdrop from \"./ui/backdrop\";\r\nimport Spinner from \"./ui/spinner\";\r\nimport VideoPlayer from \"./video.player\";\r\n\r\nimport \"../styles/video.modal.css\";\r\nimport ytAPI from \"../helpers/ytAPI\";\r\n\r\nimport { selectVideoContext } from \"../context/selectedVideoProvider\";\r\n\r\nconst VideoModal = ({ videoId }) => {\r\n  const [data, setData] = useState({\r\n    id: \"\",\r\n    title: \"\",\r\n    imgUrl: \"\",\r\n    datePublished: new Date(),\r\n    likeCount: \"\",\r\n    viewCount: \"\",\r\n    description: \"\",\r\n  });\r\n\r\n  const { setSelectedVideoId } = useContext(selectVideoContext);\r\n\r\n  const video = ytAPI.GetVideoInfo(videoId);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !video.loading &&\r\n      video.result !== null &&\r\n      video.error === null &&\r\n      data.id === \"\"\r\n    ) {\r\n      setData({\r\n        id: video.results[0].id,\r\n        title: video.results[0].snippet.title,\r\n        imgUrl: video.results[0].snippet.thumbnails.maxres.url,\r\n        datePublished: new Date(video.results[0].snippet.publishedAt),\r\n        likeCount: abbreviateNum(video.results[0].statistics.likeCount),\r\n        viewCount: abbreviateNum(video.results[0].statistics.viewCount),\r\n        description: video.results[0].snippet.description,\r\n      });\r\n    }\r\n  }, [video, data]);\r\n\r\n  return (\r\n    <Backdrop>\r\n      <div className=\"container__video-modal\">\r\n        <div className=\"container__video-modal__close-btn\">\r\n          <button\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              setSelectedVideoId(null);\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </button>\r\n        </div>\r\n        <div className=\"container__video-modal__info\">\r\n          <div className=\"info-img\">\r\n            <div className=\"info-img-overlay\">\r\n              <VideoPlayer videoID={data.id} title={data.title} />\r\n            </div>\r\n            <img src={data.imgUrl} alt={data.title} />\r\n          </div>\r\n\r\n          {video.loading ? (\r\n            <Spinner className={\"spinner-lg\"} />\r\n          ) : (\r\n            <div className=\"info-text\">\r\n              <div className=\"info-text-date\">\r\n                <p>{data.datePublished.toDateString()}</p>\r\n\r\n                <div className=\"info-text-statistics statistics-likes\">\r\n                  <p>\r\n                    <FontAwesomeIcon icon={faThumbsUp} />\r\n                  </p>\r\n                  <p>{data.likeCount}</p>\r\n                </div>\r\n\r\n                <div className=\"info-text-statistics statistics-views\">\r\n                  <p>\r\n                    <FontAwesomeIcon icon={faEye} />\r\n                  </p>\r\n                  <p>{data.viewCount}</p>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"info-text-t-series\">\r\n                <img src={TulflixIcon} alt={TulflixIcon} />\r\n                <h2>SERIES</h2>\r\n              </div>\r\n              <h2>{data.title}</h2>\r\n\r\n              <pre className=\"info-desc\">{data.description}</pre>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Backdrop>\r\n  );\r\n};\r\n\r\nexport default VideoModal;\r\n","import ReactDOM from \"react-dom\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport \"./styles/app.css\";\r\n\r\nimport Header from \"./components/ui/header\";\r\nimport Homepage from \"./components/pages/home.page\";\r\nimport VideoModal from \"./components/video.modal\";\r\n\r\nimport { selectVideoContext } from \"./context/selectedVideoProvider\";\r\n\r\nfunction App() {\r\n  const { selectedVideoId } = useContext(selectVideoContext);\r\n\r\n  useEffect(() => {\r\n    console.log(\"@App Re-render\");\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(\"@App selectedVideoId\", selectedVideoId);\r\n  }, [selectedVideoId]);\r\n\r\n  const videoInfo =\r\n    selectedVideoId !== null &&\r\n    ReactDOM.createPortal(\r\n      <VideoModal videoId={selectedVideoId} />,\r\n      document.getElementById(\"root-video-info\")\r\n    );\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Router basename={\"/\"}>\r\n        <Header />\r\n\r\n        <Switch>\r\n          <Route path=\"/\">\r\n            <Homepage />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n      {videoInfo}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createContext } from \"react\";\r\n\r\nimport NavBarProvider from \"./navBarProvider\";\r\nimport SelectedVideoProvider from \"./selectedVideoProvider\";\r\nimport ChannelProvider from \"./channelProvider\";\r\nimport ChannelActivitiesProvider from \"./channelActivitiesProvider\";\r\nimport PlaylistsProvider from \"./playlistsProvider\";\r\n\r\nconst appContext = createContext();\r\n\r\nconst AppProvider = (props) => {\r\n  console.log(\"@Provider App\");\r\n  return (\r\n    <appContext.Provider value={props}>\r\n      <NavBarProvider>\r\n        <SelectedVideoProvider>\r\n          <ChannelProvider>\r\n            <ChannelActivitiesProvider>\r\n              <PlaylistsProvider>{props.children}</PlaylistsProvider>\r\n            </ChannelActivitiesProvider>\r\n          </ChannelProvider>\r\n        </SelectedVideoProvider>\r\n      </NavBarProvider>\r\n    </appContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AppProvider;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport AppProvider from \"./context/appProvider\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppProvider>\r\n      <App />\r\n    </AppProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}